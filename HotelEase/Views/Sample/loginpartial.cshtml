@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item dropdown">
            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                Hello, @User.Identity?.Name!
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                @if (User.IsInRole("Admin"))
                {
                    <li><a class="dropdown-item" asp-area="" asp-controller="Dashboard" asp-action="AdminDashboard">Admin Dashboard</a></li>
                }
                else
                {
                    <li><a class="dropdown-item" asp-area="" asp-controller="Dashboard" asp-action="UserDashboard">User Dashboard</a></li>
                }
                <li><a class="dropdown-item" asp-area="Identity" asp-page="/Account/Manage/Index">Profile</a></li>
                <li>
                    <form method="post" asp-area="Identity" asp-page="/Account/Logout">
                        <button type="submit" class="dropdown-item">Logout</button>
                    </form>
                </li>
            </ul>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>


                        <!--DASHBOARD CONTROLLER-->
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using System.Threading.Tasks;

namespace HotelEase.Controllers
{
    public class DashboardController : Controller
    {
        private readonly UserManager<IdentityUser>
    _userManager;

    public DashboardController(UserManager<IdentityUser>
        userManager)
        {
        _userManager = userManager;
        }

        [Authorize(Roles = "Admin")]
        public IActionResult AdminDashboard()
        {
        return View();
        }

        [Authorize] // Allows any signed-in user
        public async Task<IActionResult>
            UserDashboard()
            {
            var user = await _userManager.GetUserAsync(User);
            var roles = await _userManager.GetRolesAsync(user);

            if (roles.Contains("Admin"))
            {
            return RedirectToAction("AdminDashboard"); // Prevents admins from accessing the user dashboard
            }

            return View();
            }
            }
            }


